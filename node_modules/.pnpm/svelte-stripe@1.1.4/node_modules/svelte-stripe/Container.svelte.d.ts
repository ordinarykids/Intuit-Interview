/** @typedef {typeof __propDef.props}  ContainerProps */
/** @typedef {typeof __propDef.events}  ContainerEvents */
/** @typedef {typeof __propDef.slots}  ContainerSlots */
export default class Container extends SvelteComponentTyped<{
    stripe: import("@stripe/stripe-js").Stripe;
    clientSecret?: string;
    elements?: import("@stripe/stripe-js").StripeElements;
    loader?: "auto" | "never" | "always";
    theme?: "stripe" | "night" | "flat";
    variables?: {
        fontFamily?: string;
        fontSmooth?: string;
        fontVariantLigatures?: string;
        fontVariationSettings?: string;
        fontLineHeight?: string;
        fontSizeBase?: string;
        fontSizeSm?: string;
        fontSizeXs?: string;
        fontSize2Xs?: string;
        fontSize3Xs?: string;
        fontSizeLg?: string;
        fontSizeXl?: string;
        fontWeightLight?: string;
        fontWeightNormal?: string;
        fontWeightMedium?: string;
        fontWeightBold?: string;
        spacingUnit?: string;
        spacingGridRow?: string;
        spacingGridColumn?: string;
        spacingTab?: string;
        spacingAccordionItem?: string;
        colorPrimary?: string;
        colorPrimaryText?: string;
        colorBackground?: string;
        colorBackgroundText?: string;
        colorText?: string;
        colorSuccess?: string;
        colorSuccessText?: string;
        colorDanger?: string;
        colorDangerText?: string;
        colorWarning?: string;
        colorWarningText?: string;
        colorTextSecondary?: string;
        colorTextPlaceholder?: string;
        colorIcon?: string;
        colorIconHover?: string;
        colorIconCardError?: string;
        colorIconCardCvc?: string;
        colorIconCardCvcError?: string;
        colorIconCheckmark?: string;
        colorIconChevronDown?: string;
        colorIconChevronDownHover?: string;
        colorIconRedirect?: string;
        colorIconTab?: string;
        colorIconTabHover?: string;
        colorIconTabSelected?: string;
        colorIconTabMore?: string;
        colorIconTabMoreHover?: string;
        colorLogo?: string;
        colorLogoTab?: string;
        colorLogoTabSelected?: string;
        colorLogoBlock?: string;
        focusBoxShadow?: string;
        focusOutline?: string;
        borderRadius?: string;
    };
    rules?: {
        [selector: string]: {
            [cssPropertyName: string]: string;
        };
    };
    labels?: "above" | "floating";
}, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}> {
}
export type ContainerProps = typeof __propDef.props;
export type ContainerEvents = typeof __propDef.events;
export type ContainerSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        stripe: import('@stripe/stripe-js').Stripe | null;
        clientSecret?: string | null;
        elements?: import('@stripe/stripe-js').StripeElements | null;
        loader?: "auto" | "never" | "always";
        theme?: "stripe" | "night" | "flat";
        variables?: {
            fontFamily?: string;
            fontSmooth?: string;
            fontVariantLigatures?: string;
            fontVariationSettings?: string;
            fontLineHeight?: string;
            fontSizeBase?: string;
            fontSizeSm?: string;
            fontSizeXs?: string;
            fontSize2Xs?: string;
            fontSize3Xs?: string;
            fontSizeLg?: string;
            fontSizeXl?: string;
            fontWeightLight?: string;
            fontWeightNormal?: string;
            fontWeightMedium?: string;
            fontWeightBold?: string;
            spacingUnit?: string;
            spacingGridRow?: string;
            spacingGridColumn?: string;
            spacingTab?: string;
            spacingAccordionItem?: string;
            colorPrimary?: string;
            colorPrimaryText?: string;
            colorBackground?: string;
            colorBackgroundText?: string;
            colorText?: string;
            colorSuccess?: string;
            colorSuccessText?: string;
            colorDanger?: string;
            colorDangerText?: string;
            colorWarning?: string;
            colorWarningText?: string;
            colorTextSecondary?: string;
            colorTextPlaceholder?: string;
            colorIcon?: string;
            colorIconHover?: string;
            colorIconCardError?: string;
            colorIconCardCvc?: string;
            colorIconCardCvcError?: string;
            colorIconCheckmark?: string;
            colorIconChevronDown?: string;
            colorIconChevronDownHover?: string;
            colorIconRedirect?: string;
            colorIconTab?: string;
            colorIconTabHover?: string;
            colorIconTabSelected?: string;
            colorIconTabMore?: string;
            colorIconTabMoreHover?: string;
            colorLogo?: string;
            colorLogoTab?: string;
            colorLogoTabSelected?: string;
            colorLogoBlock?: string;
            focusBoxShadow?: string;
            focusOutline?: string;
            borderRadius?: string;
        };
        rules?: {
            [selector: string]: {
                [cssPropertyName: string]: string;
            };
        };
        labels?: "above" | "floating";
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export {};
